// <auto-generated />
using System;
using ApplicationData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace dn6.Migrations
{
    [DbContext(typeof(ApplicationDataContext))]
    partial class ApplicationDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Models.Engine.Public.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AbsoluteUri")
                        .HasColumnType("text")
                        .HasColumnName("absolute_uri");

                    b.Property<int>("ApplicationCategory")
                        .HasColumnType("integer")
                        .HasColumnName("application_category");

                    b.Property<string>("Copyright")
                        .HasColumnType("text")
                        .HasColumnName("copyright");

                    b.Property<int>("CpuArch")
                        .HasColumnType("integer")
                        .HasColumnName("cpu_arch");

                    b.Property<string[]>("DependsOn")
                        .HasColumnType("text[]")
                        .HasColumnName("depends_on");

                    b.Property<int>("DetectMethod")
                        .HasColumnType("integer")
                        .HasColumnName("detect_method");

                    b.Property<string>("DetectScript")
                        .HasColumnType("text")
                        .HasColumnName("detect_script");

                    b.Property<string>("DetectValue")
                        .HasColumnType("text")
                        .HasColumnName("detect_value");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("DisplayPublisher")
                        .HasColumnType("text")
                        .HasColumnName("display_publisher");

                    b.Property<string>("DisplayVersion")
                        .HasColumnType("text")
                        .HasColumnName("display_version");

                    b.Property<string>("Docs")
                        .HasColumnType("text")
                        .HasColumnName("docs");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<int?>("ExploitReportId")
                        .HasColumnType("integer")
                        .HasColumnName("exploit_report_id");

                    b.Property<string>("Filename")
                        .HasColumnType("text")
                        .HasColumnName("filename");

                    b.Property<string>("FollowUri")
                        .HasColumnType("text")
                        .HasColumnName("follow_uri");

                    b.Property<string>("Homepage")
                        .HasColumnType("text")
                        .HasColumnName("homepage");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<string>("LastUpdate")
                        .HasColumnType("text")
                        .HasColumnName("last_update");

                    b.Property<int>("Lcid")
                        .HasColumnType("integer")
                        .HasColumnName("lcid");

                    b.Property<string>("License")
                        .HasColumnType("text")
                        .HasColumnName("license");

                    b.Property<bool>("LicenseAcceptRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("license_accept_required");

                    b.Property<int>("Locale")
                        .HasColumnType("integer")
                        .HasColumnName("locale");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Publisher")
                        .HasColumnType("text")
                        .HasColumnName("publisher");

                    b.Property<bool>("RebootRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("reboot_required");

                    b.Property<string>("Repo")
                        .HasColumnType("text")
                        .HasColumnName("repo");

                    b.Property<string>("Sha256")
                        .HasColumnType("text")
                        .HasColumnName("sha256");

                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.Property<string>("Switches")
                        .HasColumnType("text")
                        .HasColumnName("switches");

                    b.Property<string[]>("Tags")
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<string>("UID")
                        .HasColumnType("text")
                        .HasColumnName("uid");

                    b.Property<Guid>("UUID")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<string>("UninstallArgs")
                        .HasColumnType("text")
                        .HasColumnName("uninstall_args");

                    b.Property<string>("UninstallCmd")
                        .HasColumnType("text")
                        .HasColumnName("uninstall_cmd");

                    b.Property<int>("UninstallMethod")
                        .HasColumnType("integer")
                        .HasColumnName("uninstall_method");

                    b.Property<string>("UriPath")
                        .HasColumnType("text")
                        .HasColumnName("uri_path");

                    b.Property<string>("Version")
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.Property<int?>("VirusTotalScanResultsId")
                        .HasColumnType("integer")
                        .HasColumnName("virus_total_scan_results_id");

                    b.Property<int>("XftCode")
                        .HasColumnType("integer")
                        .HasColumnName("xft_code");

                    b.HasKey("Id")
                        .HasName("pk_applications");

                    b.HasIndex("UUID", "UID")
                        .IsUnique()
                        .HasDatabaseName("ix_applications_uuid_uid");

                    b.ToTable("applications", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
